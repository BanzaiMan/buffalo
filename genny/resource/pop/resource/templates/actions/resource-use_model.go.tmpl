package actions

import (

  "github.com/pkg/errors"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "{{.opts.App.ModelsPkg}}"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular ({{.opts.Model.Proper}})
// DB Table: Plural ({{.opts.Model.Tableize}})
// Resource: Plural ({{.opts.Name.Proper}})
// Path: Plural (/{{.opts.Name.URL}})
// View Template Folder: Plural (/templates/{{.opts.Name.Tableize}}/)

// {{.opts.Name.Proper.Pluralize}}Resource is the resource for the {{.opts.Model.Proper}} model
type {{.opts.Name.Proper.Pluralize}}Resource struct{
  buffalo.Resource
}

// List gets all {{.opts.Model.Proper.Pluralize}}. This function is mapped to the path
// GET /{{.opts.Name.URL}}
func (v {{.opts.Name.Proper.Pluralize}}Resource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return errors.WithStack(errors.New("no transaction found"))
  }

  {{.opts.Model.VarCasePlural}} := &models.{{.opts.Model.Proper.Pluralize}}{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all {{.opts.Model.Proper.Pluralize}} from the DB
  if err := q.All({{.opts.Model.VarCasePlural}}); err != nil {
    return errors.WithStack(err)
  }

  // Add the paginator to the context so it can be used in the template.
  c.Set("pagination", q.Paginator)

  return c.Render(200, r.Auto(c, {{.opts.Model.VarCasePlural}}))
}

// Show gets the data for one {{.opts.Model.Proper}}. This function is mapped to
// the path GET /{{.opts.Name.URL}}/{{"{"}}{{.opts.Name.ParamID}}}
func (v {{.opts.Name.Proper.Pluralize}}Resource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return errors.WithStack(errors.New("no transaction found"))
  }

  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingle}} := &models.{{.opts.Model.Proper}}{}

  // To find the {{.opts.Model.Proper}} the parameter {{.opts.Name.ParamID}} is used.
  if err := tx.Find({{.opts.Model.VarCaseSingle}}, c.Param("{{.opts.Name.ParamID}}")); err != nil {
    return c.Error(404, err)
  }

  return c.Render(200, r.Auto(c, {{.opts.Model.VarCaseSingle}}))
}

// New renders the form for creating a new {{.opts.Model.Proper}}.
// This function is mapped to the path GET /{{.opts.Name.URL}}/new
func (v {{.opts.Name.Proper.Pluralize}}Resource) New(c buffalo.Context) error {
  return c.Render(200, r.Auto(c, &models.{{.opts.Model.Proper}}{}))
}

// Create adds a {{.opts.Model.Proper}} to the DB. This function is mapped to the
// path POST /{{.opts.Name.URL}}
func (v {{.opts.Name.Proper.Pluralize}}Resource) Create(c buffalo.Context) error {
  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingle}} := &models.{{.opts.Model.Proper}}{}

  // Bind {{.opts.Model.VarCaseSingle}} to the html form elements
  if err := c.Bind({{.opts.Model.VarCaseSingle}}); err != nil {
    return errors.WithStack(err)
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return errors.WithStack(errors.New("no transaction found"))
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate({{.opts.Model.VarCaseSingle}})
  if err != nil {
    return errors.WithStack(err)
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the new.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, {{.opts.Model.VarCaseSingle}}))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", "{{.opts.Model.Proper}} was created successfully")

  // and redirect to the {{.opts.Name.URL}} index page
  return c.Render(201, r.Auto(c, {{.opts.Model.VarCaseSingle}}))
}

// Edit renders a edit form for a {{.opts.Model.Proper}}. This function is
// mapped to the path GET /{{.opts.Name.URL}}/{{"{"}}{{.opts.Name.ParamID}}}/edit
func (v {{.opts.Name.Proper.Pluralize}}Resource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return errors.WithStack(errors.New("no transaction found"))
  }

  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingle}} := &models.{{.opts.Model.Proper}}{}

  if err := tx.Find({{.opts.Model.VarCaseSingle}}, c.Param("{{.opts.Name.ParamID}}")); err != nil {
    return c.Error(404, err)
  }

  return c.Render(200, r.Auto(c, {{.opts.Model.VarCaseSingle}}))
}

// Update changes a {{.opts.Model.Proper}} in the DB. This function is mapped to
// the path PUT /{{.opts.Name.URL}}/{{"{"}}{{.opts.Name.ParamID}}}
func (v {{.opts.Name.Proper.Pluralize}}Resource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return errors.WithStack(errors.New("no transaction found"))
  }

  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingle}} := &models.{{.opts.Model.Proper}}{}

  if err := tx.Find({{.opts.Model.VarCaseSingle}}, c.Param("{{.opts.Name.ParamID}}")); err != nil {
    return c.Error(404, err)
  }

  // Bind {{.opts.Model.Proper}} to the html form elements
  if err := c.Bind({{.opts.Model.VarCaseSingle}}); err != nil {
    return errors.WithStack(err)
  }

  verrs, err := tx.ValidateAndUpdate({{.opts.Model.VarCaseSingle}})
  if err != nil {
    return errors.WithStack(err)
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the edit.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, {{.opts.Model.VarCaseSingle}}))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", "{{.opts.Model.Proper}} was updated successfully")

  // and redirect to the {{.opts.Name.URL}} index page
  return c.Render(200, r.Auto(c, {{.opts.Model.VarCaseSingle}}))
}

// Destroy deletes a {{.opts.Model.Proper}} from the DB. This function is mapped
// to the path DELETE /{{.opts.Name.URL}}/{{"{"}}{{.opts.Name.ParamID}}}
func (v {{.opts.Name.Proper.Pluralize}}Resource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return errors.WithStack(errors.New("no transaction found"))
  }

  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingle}} := &models.{{.opts.Model.Proper}}{}

  // To find the {{.opts.Model.Proper}} the parameter {{.opts.Name.ParamID}} is used.
  if err := tx.Find({{.opts.Model.VarCaseSingle}}, c.Param("{{.opts.Name.ParamID}}")); err != nil {
    return c.Error(404, err)
  }

  if err := tx.Destroy({{.opts.Model.VarCaseSingle}}); err != nil {
    return errors.WithStack(err)
  }

  // If there are no errors set a flash message
  c.Flash().Add("success", "{{.opts.Model.Proper}} was destroyed successfully")

  // Redirect to the {{.opts.Name.URL}} index page
  return c.Render(200, r.Auto(c, {{.opts.Model.VarCaseSingle}}))
}
