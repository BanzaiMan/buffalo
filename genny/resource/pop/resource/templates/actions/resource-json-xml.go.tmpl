package actions

import (

  "github.com/pkg/errors"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "{{.opts.App.ModelsPkg}}"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular ({{.opts.Model.Proper}})
// DB Table: Plural ({{.opts.Model.Table}})
// Resource: Plural ({{.opts.Name.Proper}})
// Path: Plural (/{{.opts.Name.URL}})
// View Template Folder: Plural (/templates/{{.opts.FilesPath}}/)

// {{.opts.Name.Proper}}Resource is the resource for the {{.opts.Model.Proper}} model
type {{.opts.Name.Proper}}Resource struct{
  buffalo.Resource
}

// List gets all {{.opts.Model.ProperPlural}}. This function is mapped to the path
// GET /{{.opts.Name.URL}}
func (v {{.opts.Name.Proper}}Resource) List(c buffalo.Context) error {
  // Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

  {{.opts.Model.VarCasePlural}} := &models.{{.opts.Model.ProperPlural}}{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all {{.opts.Model.ProperPlural}} from the DB
  if err := q.All({{.opts.Model.VarCasePlural}}); err != nil {
    return errors.WithStack(err)
  }

  // Add the paginator to the headers so clients know how to paginate.
  c.Response().Header().Set("X-Pagination", q.Paginator.String())

  return c.Render(200, r.{{.opts.MimeType}}({{.opts.Model.VarCasePlural}}))
}

// Show gets the data for one {{.opts.Model.Proper}}. This function is mapped to
// the path GET /{{.opts.Name.URL}}/{{"{"}}{{.opts.Name.ParamID}}}
func (v {{.opts.Name.Proper}}Resource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingular}} := &models.{{.opts.Model.Proper}}{}

  // To find the {{.opts.Model.Proper}} the parameter {{.opts.Name.ParamID}} is used.
  if err := tx.Find({{.opts.Model.VarCaseSingular}}, c.Param("{{.opts.Name.ParamID}}")); err != nil {
    return c.Error(404, err)
  }

  return c.Render(200, r.{{.opts.MimeType}}({{.opts.Model.VarCaseSingular}}))
}

// New default implementation. Returns a 404
func (v {{.opts.Name.Proper}}Resource) New(c buffalo.Context) error {
  return c.Error(404, errors.New("not available"))
}

// Create adds a {{.opts.Model.Proper}} to the DB. This function is mapped to the
// path POST /{{.opts.Name.URL}}
func (v {{.opts.Name.Proper}}Resource) Create(c buffalo.Context) error {
  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingular}} := &models.{{.opts.Model.Proper}}{}

  // Bind {{.opts.Model.VarCaseSingular}} to the html form elements
  if err := c.Bind({{.opts.Model.VarCaseSingular}}); err != nil {
    return errors.WithStack(err)
  }

  // Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate({{.opts.Model.VarCaseSingular}})
  if err != nil {
    return errors.WithStack(err)
  }

  if verrs.HasAny() {
    // Render errors as {{.opts.MimeType}}
    return c.Render(400, r.{{.opts.MimeType}}(verrs))
  }

  return c.Render(201, r.{{.opts.MimeType}}({{.opts.Model.VarCaseSingular}}))
}

// Edit default implementation. Returns a 404
func (v {{.opts.Name.Proper}}Resource) Edit(c buffalo.Context) error {
  return c.Error(404, errors.New("not available"))
}

// Update changes a {{.opts.Model.Proper}} in the DB. This function is mapped to
// the path PUT /{{.opts.Name.URL}}/{{"{"}}{{.opts.Name.ParamID}}}
func (v {{.opts.Name.Proper}}Resource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingular}} := &models.{{.opts.Model.Proper}}{}

  if err := tx.Find({{.opts.Model.VarCaseSingular}}, c.Param("{{.opts.Name.ParamID}}")); err != nil {
    return c.Error(404, err)
  }

  // Bind {{.opts.Model.Proper}} to the html form elements
  if err := c.Bind({{.opts.Model.VarCaseSingular}}); err != nil {
    return errors.WithStack(err)
  }

  verrs, err := tx.ValidateAndUpdate({{.opts.Model.VarCaseSingular}})
  if err != nil {
    return errors.WithStack(err)
  }

  if verrs.HasAny() {
    // Render errors as {{.opts.MimeType}}
    return c.Render(400, r.{{.opts.MimeType}}(verrs))
  }

  return c.Render(200, r.{{.opts.MimeType}}({{.opts.Model.VarCaseSingular}}))
}

// Destroy deletes a {{.opts.Model.Proper}} from the DB. This function is mapped
// to the path DELETE /{{.opts.Name.URL}}/{{"{"}}{{.opts.Name.ParamID}}}
func (v {{.opts.Name.Proper}}Resource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

  // Allocate an empty {{.opts.Model.Proper}}
  {{.opts.Model.VarCaseSingular}} := &models.{{.opts.Model.Proper}}{}

  // To find the {{.opts.Model.Proper}} the parameter {{.opts.Name.ParamID}} is used.
  if err := tx.Find({{.opts.Model.VarCaseSingular}}, c.Param("{{.opts.Name.ParamID}}")); err != nil {
    return c.Error(404, err)
  }

  if err := tx.Destroy({{.opts.Model.VarCaseSingular}}); err != nil {
    return errors.WithStack(err)
  }

  return c.Render(200, r.{{.opts.MimeType}}({{.opts.Model.VarCaseSingular}}))
}
